(()=>{"use strict";const t=class{constructor(t,e){this.name=t,this.length=e,this.health=e,this.coordinates=[],this.orientation=null}hit(){this.health-=1}isSunk(){return 0===this.health}},e=[{x:0,y:1},{x:1,y:0}];function n(t){return t[Math.floor(Math.random()*t.length)]}function r(t){const e=[];for(let n=0;n<t.length;++n)for(let r=0;r<t.length;++r)null===t[n][r]&&e.push([n,r]);return n(e)}function s(){return`rgba(${255*Math.random()}, ${255*Math.random()}, ${255*Math.random()}, 0.5)`}function i([t,e],n){return t>=0&&t<n.length&&e>=0&&e<n.length}const o=document.querySelector(".player"),a=document.querySelector(".computer"),l=document.querySelector("#message"),c=8;function h(t){t.innerHTML="";for(let e=0;e<c;++e)for(let n=0;n<c;++n){const r=u(e,n);t.appendChild(r)}}function u(t,e){const n=document.createElement("div");return n.classList.add("cell"),n.dataset.x=t,n.dataset.y=e,n}function d({cell:t,hit:e},n){const r=n.querySelector(`[data-x="${t[0]}"][data-y="${t[1]}"]`);if(r.classList.contains("hit"))return null;r.classList.add("hit"),e&&r.classList.add("success");const s=document.createElement("span");s.innerHTML="&times;",r.prepend(s)}function p(t){l.textContent=t}let m=null,g=null;const f=new Map;let y=null,v=null,x=null,S=null,b=!1,L=null;function H(t){v=t.target,v.classList.add("dragging"),v.style.removeProperty("background-color"),b=!0,x=t.clientX,S=t.clientY}function C(t){if(b){v.classList.remove("dragging"),v.classList.remove("notplaceable"),v.style.left="0px",v.style.top="0px";const t=L;if(t&&function(t,e){const n=[Number(t.dataset.x),Number(t.dataset.y)],r=f.get(e);return y.placeShipAt(r,n,r.orientation)}(t,v))t.appendChild(v);else{const t=f.get(v);y.placeShipAt(t,t.coordinates[0],t.orientation)}}b=!1,v.style.backgroundColor=s(),k()}function M(t){b&&(y.removeShip(f.get(v)),v.style.left=t.clientX-x+"px",v.style.top=t.clientY-S+"px",L!==E()&&k(),L=E(),function(t){if(t){const e=f.get(v).length,n=function(t,e){const n=[];if(!t)return n;const r=Number(t.dataset.x),s=Number(t.dataset.y),i=f.get(v).orientation;for(let t=0;t<e;++t){const e=r+t*i.x,o=s+t*i.y,a=document.querySelector(`[data-x="${e}"][data-y="${o}"]`);a&&null===y.getBoard()[e][o]&&n.push(a)}return n}(t,e);if(n.length===e)return n.forEach((t=>{t.classList.add("highlight")})),void v.classList.remove("notplaceable")}v.classList.add("notplaceable")}(L))}function w(t){if(2===t.button){const e=60,n=t.target,r=f.get(n),s={x:1-r.orientation.x,y:1-r.orientation.y};y.placeShipAt(r,r.coordinates[0],s),n.style.width=`${Math.max(e,r.orientation.y*r.length*e)}px`,n.style.height=`${Math.max(e,r.orientation.x*r.length*e)}px`}}function E(){let t=1/0;return g.forEach((e=>{const n=Math.abs(e.getBoundingClientRect().x-v.getBoundingClientRect().x)+Math.abs(e.getBoundingClientRect().y-v.getBoundingClientRect().y);n<t&&(L=e,t=n)})),t>60?null:L}function k(){document.querySelectorAll(".highlight").forEach((t=>{t.classList.remove("highlight")}))}const A=document.querySelector(".main");function $(t){!t.target.classList.contains("hit")&&t.target.classList.contains("cell")&&function(t){if(X())return null;if(d({cell:t,hit:P.gameboardHandler.receiveAttack(t)},F),X())return null;d(P.AI.playMove(),z),X()}([t.target.dataset.x,t.target.dataset.y])}const q=class{static placeRandom(t,e){const n=[...t];for(;n.length>0;){const t=n.shift();this.tryToPlace(t,e)||n.push(t)}}static tryToPlace(t,s,i,o){i=i||r(s),o=o||n(e),this.removeShipFromBoard(t,s);const a=this.#t(t.length,i,s,o);return a.length<t.length?(t.coordinates.forEach((([e,n])=>s[e][n]=t)),!1):(t.coordinates=a,t.orientation=o,a.forEach((([e,n])=>s[e][n]=t)),!0)}static#t(t,e,n,r){const s=[];for(let o=0;o<t;++o){const t=e[0]+o*r.x,a=e[1]+o*r.y;i([t,a],n)&&null===n[t][a]&&s.push([t,a])}return s}static removeShipFromBoard(t,e){t.coordinates.forEach((([t,n])=>{e[t][n]=null}))}},R=class{constructor(){this.boardSize=8,this.Ships=[new t("Hydra",5),new t("Pegasus",4),new t("Orion",3),new t("Scorpius",2),new t("Leo",1)],this.board=this.createboard(this.boardSize),this.boardLog=this.createboard(this.boardSize),this.placeShipsRandomly()}createboard(t){return new Array(t).fill(null).map((()=>new Array(t).fill(null)))}placeShipsRandomly(){q.placeRandom(this.Ships,this.board)}placeShipAt(t,e,n){return q.tryToPlace(t,this.board,e,n)}removeShip(t){q.removeShipFromBoard(t,this.board)}areShipsSunk(){return!this.Ships.some((t=>!t.isSunk()))}receiveAttack([t,e]){return null!==this.board[t][e]&&(this.board[t][e].hit(),this.board[t][e]=null,!0)}getShips(){return this.Ships}getBoard(){return this.board}},B=class{constructor(t){this.name=t,this.gameboardHandler=new R}},N=class{constructor(t){this.board=this.createBoard(8),this.nextMoves=[],this.currHitCells=[],this.attackfn=t}createBoard(t){return new Array(t).fill(null).map((()=>new Array(t).fill(null)))}playMove(){return this.nextMoves.length>0?this.playSmart():this.playRandom()}playRandom(){const t={},e=r(this.board);if(t.cell=e,t.hit=!1,this.isHit(e)){t.hit=!0,this.currHitCells=[],this.currHitCells.push(e);const n=this.calcHitDirection();this.setNextMoves(e,n)}return t}playSmart(){const t={},e=this.nextMoves.pop();if(t.cell=e,t.hit=!1,this.isHit(e)){t.hit=!0,this.currHitCells.push(e);const n=this.calcHitDirection();this.setNextMoves(e,n)||this.changeDir()}else this.currHitCells.length>1&&this.changeDir();return t}isHit([t,e]){return this.board[t][e]="#",this.attackfn([t,e])}calcHitDirection(){const t=this.currHitCells.length;if(t>1){const[e,n]=this.currHitCells[t-1],[r,s]=this.currHitCells[t-2];return[[e-r,n-s]]}return[[0,1],[1,0],[0,-1],[-1,0]]}changeDir(){this.currHitCells.reverse();const t=this.calcHitDirection();this.setNextMoves(...this.currHitCells.slice(-1),t)}setNextMoves([t,e],n){this.nextMoves=[];for(let r=0;r<n.length;++r){const s=t+n[r][0],o=e+n[r][1];i([s,o],this.board)&&null===this.board[s][o]&&this.nextMoves.push([s,o])}return 0!==this.nextMoves.length}};let D=null,P=null,T=null,z=null,F=null;function I(){h(o),h(a),D=new B("Human"),P=new B("Computer"),P.AI=new N(D.gameboardHandler.receiveAttack.bind(D.gameboardHandler)),z=document.querySelector(".player"),F=document.querySelector(".computer"),function(t){var e;m=document.querySelector(".player"),g=document.querySelectorAll(".player .cell"),y=t.gameboardHandler,e=y.getShips(),f.clear(),e.forEach((t=>{const e=function(t){const e=document.createElement("div");return e.classList.add("ship",t.name),e.style.backgroundColor=s(),e.style.top="0px",e.style.left="0px",e.style.width=`${Math.max(60,t.orientation.y*t.length*60)}px`,e.style.height=`${Math.max(60,t.orientation.x*t.length*60)}px`,e}(t);f.set(e,t);const[n,r]=t.coordinates[0];m.querySelector(`[data-x="${n}"][data-y="${r}"]`).appendChild(e)}));for(const t of f.keys())t.addEventListener("mousedown",H),t.addEventListener("mouseup",C),t.addEventListener("mouseup",w);document.addEventListener("mousemove",M),m.addEventListener("contextmenu",(t=>t.preventDefault()))}(D),F.removeEventListener("click",$),p("Drag & Drop Ships. Right Click to Rotate")}function X(){return D.gameboardHandler.areShipsSunk()?T=P:P.gameboardHandler.areShipsSunk()&&(T=D),null!==T&&p(`${T.name} wins!`),null!==T}A.addEventListener("click",(function(t){A.classList.contains("start")?(T=null,function(){for(const t of f.keys())t.removeEventListener("mousedown",H),t.removeEventListener("mouseup",C),t.removeEventListener("mouseup",w)}(),F.addEventListener("click",$),p(""),A.textContent="New Game"):(I(),A.textContent="Play"),A.classList.toggle("start")})),I()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,