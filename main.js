(()=>{"use strict";const t=class{constructor(t,e){this.name=t,this.length=e,this.health=e,this.coordinates=[],this.orientation=null}hit(){this.health-=1}isSunk(){return 0===this.health}},e=[{x:0,y:1},{x:1,y:0}];function n(t){return t[Math.floor(Math.random()*t.length)]}function o(){return`rgb(${255*Math.random()}, ${255*Math.random()}, ${255*Math.random()})`}function r([t,e],n){return t>=0&&t<n.length&&e>=0&&e<n.length}const a=document.querySelector(".player"),s=document.querySelector(".computer");function l(t,e){const n=document.createElement("div");return n.classList.add("cell"),n.dataset.x=t,n.dataset.y=e,n}function i(t){for(let e=0;e<8;++e)for(let n=0;n<8;++n){const o=l(e,n);t.appendChild(o)}}const c=class{static placeRandom(t,e){const n=[...t];for(;n.length>0;){const t=n.shift();this.tryToPlace(t,e)||n.push(t)}}static tryToPlace(t,o,r,a){r=r||function(t){const e=[];for(let n=0;n<t.length;++n)for(let o=0;o<t.length;++o)null===t[n][o]&&e.push([n,o]);return n(e)}(o),a=a||n(e);const s=t.coordinates;s.forEach((([t,e])=>{o[t][e]=null}));const l=this.#t(t.length,r,o,a);return l.length<t.length?(s.forEach((([e,n])=>o[e][n]=t)),!1):(t.coordinates=l,l.forEach((([e,n])=>o[e][n]=t)),t.orientation=a,!0)}static#t(t,e,n,o){const a=[];for(let s=0;s<t;++s){const t=e[0]+s*o.x,l=e[1]+s*o.y;r([t,l],n)&&null===n[t][l]&&a.push([t,l])}return a}},h=class{constructor(){this.boardSize=8,this.Ships=[new t("Hydra",5),new t("Pegasus",4),new t("Orion",3),new t("Scorpius",2),new t("Leo",1)],this.createboard(this.boardSize),this.placeShipsRandomly()}createboard(t){this.board=new Array(t).fill(null).map((()=>new Array(t).fill(null)))}placeShipsRandomly(){c.placeRandom(this.Ships,this.board)}placeShipAt(t,e,n){return c.tryToPlace(t,this.board,e,n)}areShipsSunk(){return!this.Ships.some((t=>!t.isSunk()))}receiveAttack([t,e]){return null!==this.board[t][e]&&(this.board[t][e].hit(),!0)}getShips(){return this.Ships}getBoard(){return this.board}};let u=null,d=null;const g=new Map;let p=null,y=null,f=null,m=null,x=!1,b=null;function S(t){y=t.target,y.classList.add("dragging"),y.style.removeProperty("background-color"),x=!0,f=t.clientX,m=t.clientY}function v(t){if(x){y.classList.remove("dragging"),y.classList.remove("notplaceable"),y.style.left="0px",y.style.top="0px";const t=b;t&&function(t,e){const n=[Number(t.dataset.x),Number(t.dataset.y)],o=g.get(e);return c.tryToPlace(o,p,n,o.orientation)}(t,y)?t.appendChild(y):g.get(y).coordinates.forEach((([t,e])=>p[t][e]=g.get(y)))}x=!1,y.style.backgroundColor=o(),M()}function E(t){x&&(g.get(y).coordinates.forEach((([t,e])=>p[t][e]=null)),y.style.left=t.clientX-f+"px",y.style.top=t.clientY-m+"px",b!==L()&&M(),b=L(),function(t){if(t){const e=g.get(y).length,n=function(t,e){const n=[];if(!t)return n;const o=Number(t.dataset.x),r=Number(t.dataset.y),a=g.get(y).orientation;for(let t=0;t<e;++t){const e=o+t*a.x,s=r+t*a.y,l=document.querySelector(`[data-x="${e}"][data-y="${s}"]`);l&&null===p[e][s]&&n.push(l)}return n}(t,e);if(n.length===e)return n.forEach((t=>{t.classList.add("highlight")})),void y.classList.remove("notplaceable")}y.classList.add("notplaceable")}(b))}function w(t){if(2===t.button){const e=60,n=t.target,o=g.get(n),r={x:1-o.orientation.x,y:1-o.orientation.y};c.tryToPlace(o,p,o.coordinates[0],r),n.style.width=`${Math.max(e,o.orientation.y*o.length*e)}px`,n.style.height=`${Math.max(e,o.orientation.x*o.length*e)}px`}}function L(){let t=1/0;return d.forEach((e=>{const n=Math.abs(e.getBoundingClientRect().x-y.getBoundingClientRect().x)+Math.abs(e.getBoundingClientRect().y-y.getBoundingClientRect().y);n<t&&(b=e,t=n)})),t>60?null:b}function M(){document.querySelectorAll(".highlight").forEach((t=>{t.classList.remove("highlight")}))}i(a),i(s),function(t){var e;u=document.querySelector(".player"),d=document.querySelectorAll(".player .cell"),p=t.getBoard(),e=t.getShips(),g.clear(),e.forEach((t=>{const e=function(t){const e=document.createElement("div");return e.classList.add("ship",t.name),e.style.backgroundColor=o(),e.style.top="0px",e.style.left="0px",e.style.width=`${Math.max(60,t.orientation.y*t.length*60)}px`,e.style.height=`${Math.max(60,t.orientation.x*t.length*60)}px`,e}(t);g.set(e,t);const[n,r]=t.coordinates[0];u.querySelector(`[data-x="${n}"][data-y="${r}"]`).appendChild(e)}));for(const t of g.keys())t.addEventListener("mousedown",S),t.addEventListener("mouseup",v),t.addEventListener("mouseup",w);document.addEventListener("mousemove",E),u.addEventListener("contextmenu",(t=>t.preventDefault()))}(new class{constructor(t){this.name=t,this.gameboard=new h}}("player").gameboard)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,